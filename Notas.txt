git init -> Incializa el repositorio
git status -> información de la carpeta
code . -> abrir el vs code en la misma dirección
git log -> Historial de cambios
git log --oneline -> Ver en algo más resumido el historial
git log -p -> Ver el historial con los cambios detallados
git log --pretty="format:%H" -> para ver solo los hash

NOTA:  El --pretty="format:%H" tiene más formas como el --pretty="format:%h %s" (con este veremos el hash acortado y el submit o mensaje)


/*******************/
git init --bare -> Crea un repositorio de solo cambios que no contiene código sino registros


git remote add (nombre del servidor) (ruta del servidor) -> para añadir un servidor remoto


git remote -> para ver los servidore que tenemos registrados

git remote -v -> ver los servidores con la ruta de los mismos


git clone (ruta pero debe tener la ruta asi /c/Users/Usuario/OneDrive/ONE/GIT-Y-GITHUB/servidor 
)  (nombre que quieres que tenga o ninguno)

NOTA : $ git remote rm (nombre o ruta a eliminar) ->


/******************/

git push (nombre del servidor) (rama)

NOTA por defecto dentro de la carpeta este tendra el nombre de "origin" para cambiarlo hacemos esto ->

git remote rename origin(nombre antiguo) local(nombre nuevo)

/***********/
git pull (servidor ) (rama) -> trae desde el servidor el contenido modificado






/**************/

git branch -> ver las ramas 
git branch (nombre)-> crea otra rama
git checkout (nombre) -> se mueve a la rama especificada

git checkout -b (nombre) -> asi creamos y nos cambiamos al mismo tiempo de rama


/************/
git merge (rama a fusionar en la que estas posicionada) -> OJO: debes estar en la rama que quieres como principal para que conserve el nombre


/*****************/
git rebase (nombre del archivo a traer antes) -> Para traer el historial de esa rama a la rama principal donde estas

/********/
NOTA : Para retroceder antes un add solamente debemos poner: 
git restore (nombre del archivo)


Si quereremos hacerlo cuando ya hicimos el add 
git restore --staged (nombre del archivo)


Si ya enviaste el commit
git revert (codigo del historial)


/***********/


git stash -> hace que se guarde los cambios hasta el momento el algun lugar y los deja a como estuvo hasta antes del ultimo cambios


git stash list -> lista de stash que tenemos. Pueden ser muchos

git stash apply (numero) -> regresa y hace un merge al documento actual 

git stash drop (numero)-> elimina lo que tenga en el stash

git stash pop -> fusiona y elimina el ultimo stash


/*******/

Para viajar en distintos tiempos del commit 

git checkout id-hash

NOTA: Podemos manipularlo y jugar con este pero no se guardara cuando regresemos a la rama que queramos.
Para guardarlo necesitamos que a partir de ahi, creemos una rama nueva




/*******************/

git diff (archivo) -> Se usa para ver los cambios que haz añadido NOTA: Solo funcionara si no le haz dado al add


git diff (hash de alguna version)..(hash de otra version) ->Compara los cambiios entre ambos 
SUGERENCIA: Pon el más antiguo primero para visualizarlo mejor

/**********************/


git tag -a (version o nombre) -m "Mensaje que dar" -> asi añadimos una tag pero OJO: 


git push origin (version o nombre)  